name: "CI and CD for Frontend"

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    name: "Build, Test and Publish"
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        name: "Check out repository"

      - uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        name: "Setup node"
        with:
          node-version: "18"

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: changes
        with:
          filters: |
            src:
              - "src/frontend/**"

      - if: steps.changes.outputs.src == 'true'
        name: "Install dependencies"
        run: npm ci
        working-directory: "src/frontend"

      - if: steps.changes.outputs.src == 'true'
        name: "Lint node files"
        run: npm run lint
        working-directory: "src/frontend"

      - if: steps.changes.outputs.src == 'true'
        name: "Run tests"
        run: npm test
        working-directory: "src/frontend"

      - if: success() || failure()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: "Upload jest test results"
          path: src/frontend/reports/jest-junit.xml

      - name: "Markdown lint"
        run: |
          npx markdownlint-cli2 "**/*.md" --config ".github/.markdownlint.json" "#src/frontend/node_modules"

      - name: "Spell check"
        run: |
          wget https://raw.githubusercontent.com/tbroadley/spellchecker-cli/master/dictionaries/base.txt
          echo "" >> base.txt
          echo "emailable" >> base.txt
          echo "anonymize" >> base.txt
          echo "pre-populated" >> base.txt
          echo "favorability" >> base.txt
          echo "Dev" >> base.txt
          echo "tooltip" >> base.txt
          echo "outloud" >> base.txt
          echo "timebox" >> base.txt
          echo "uncast" >> base.txt
          echo "PRs" >> base.txt
          echo "CodeCov" >> base.txt
          echo "Backend" >> base.txt
          echo "WIP" >> base.txt
          echo "OKR" >> base.txt
          echo "OKRs" >> base.txt
          echo "CSV" >> base.txt
          echo "GitHub" >> base.txt
          echo "DevOps" >> base.txt
          echo "Frontend" >> base.txt
          echo "ERD" >> base.txt
          echo "Changelog" >> base.txt
          echo "changelog" >> base.txt
          echo "ReactTable" >> base.txt
          echo "README" >> base.txt
          echo "OpenSSF" >> base.txt
          echo "CI_Backend" >> base.txt
          npx -y spellchecker-cli --config ./.github/.spellcheckerrc.yaml

      - if: steps.changes.outputs.src == 'true'
        name: "OpenSSF Score Card"
        run: |
          #!/bin/bash
          set -e
          docker run -e GITHUB_AUTH_TOKEN=${{ github.token }} gcr.io/openssf/scorecard:stable --repo=https://github.com/microsoft/vsts-extension-retrospectives || true

      - if: steps.changes.outputs.src == 'true'
        name: "Code Coverage for CodeCov"
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          name: Codecov Run
          files: coverage/coverage-final.json

      - if: steps.changes.outputs.src == 'true'
        name: "Prepare vss-extension-dev.json"
        working-directory: 'src/frontend'
        run: |
          cp vss-extension-dev.json.template vss-extension-dev.json

          scripts/update_ext_manifest.sh \
            "vss-extension-dev.json" \
            "enginpolat" \
            "retrospective-vsts-extension-dev" \
            "${{ secrets.AZURE_DEVOPS_TOKEN }}"

      - if: steps.changes.outputs.src == 'true'
        name: "Prepare extension package"
        working-directory: 'src/frontend'
        env:
          REACT_APP_COLLABORATION_STATE_SERVICE_URL: ${{ secrets.BACKEND_WEBAPP }}
          REACT_APP_APP_INSIGHTS_INSTRUMENTATION_KEY: ${{ secrets.AI_INSTRUMENTATION_KEY }}
        run: |
          npm run build:p
          npm run pack:d

      - if: steps.changes.outputs.src == 'true'
        name: "Publish extension to dev environment"
        working-directory: 'src/frontend'
        run: >
          npx tfx extension publish
          --manifests vss-extension-dev.json
          --vsix ./dist/*.vsix
          --token "${{ secrets.AZURE_DEVOPS_TOKEN }}"
